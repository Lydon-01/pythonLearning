#########################################################################
#                 10-row School abacus
#                         by
#                      Michael H
#########################################################################
#       Description partially extracted from from wikipedia 
#
#  Around the world, abaci have been used in pre-schools and elementary
#
# In Western countries, a bead frame similar to the Russian abacus but
# with straight wires and a vertical frame has been common (see image).
# Helps schools as an aid in teaching the numeral system and arithmetic
#
#         |00000*****   |     row factor 1000000000
#         |00000*****   |     row factor 100000000
#         |00000*****   |     row factor 10000000 
#         |00000*****   |     row factor 1000000
#         |00000*****   |     row factor 100000
#         |00000*****   |     row factor 10000
#         |00000*****   |     row factor 1000
#         |00000****   *|     row factor 100     * 1
#         |00000***   **|     row factor 10      * 2
#         |00000**   ***|     row factor 1       * 3
#                                        -----------    
#                             Sum                123 
#
# Each row represents a different row factor, starting with x1 at the
# bottom, ascending up to x1000000000 at the top row.     
######################################################################

# TASK:
# Define a procedure print_abacus(integer) that takes a positive integer
# and prints a visual representation (image) of an abacus setup for a 
# given positive integer value.
# 
# Ranking
# 1 STAR: solved the problem!
# 2 STARS: 6 < lines <= 9
# 3 STARS: 3 < lines <= 6
# 4 STARS: 0 < lines <= 3

def print_abacus(value):
    
    # Protection against numbers that are too large for an abacus
    if value > 999999999:
        print "Too big!"
        print "============END============="
        return
        
    # Variables for position and length to be used in the loop
    value = str(value)
    length = len(value) # Length is now an INT
    position = 0
    print (str(length)) + " The Length" # Debugging
    
    # Loop to print 0 * each number in the Input value. New line for each.
    p1= ">>>|"
    p2= "00000*****   "
    p3= "|"
    ball= "*"
    while position < length:
        print str(position) + " The position" # Debugging
        print value[position] + " The character in that position" # Debugging
        line = "0" * int(value[position]) # The position value in zeros temporarily
        if len(line) > 5: # Print out the first 5 zeros plus the number of stars in difference
            answer = "00000" + ((len(line) - 5) * ball)
            print p1 + answer + p3
        else:
            answer = line + p2[:(13-(2*int(value)))] + (int(value) * " ") + (int(value) * ball) + p3 # This is a mess, needs clarity
        position += 1
    print "============END============="

    # Now build in a way for it to fill all 10 lines of the abacus.
    
       

###  TEST CASES
print "Abacus showing TOO BIG:"
print_abacus(12345678910)
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
print "Abacus showing 12345678:"
print_abacus(12345678)
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000****   *|
#>>>|00000***   **|
#>>>|00000**   ***|
#>>>|00000*   ****|
#>>>|00000   *****|
#>>>|0000   0*****|
#>>>|000   00*****|
#>>>|00   000*****|
print "Abacus showing 1337:"
print_abacus(1337)
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000*****   |
#>>>|00000****   *|
#>>>|00000**   ***|
#>>>|00000**   ***|
#>>>|000   00*****|



## Older stuff thats possibly helpful
def line_pos(v):
    p1= ">>>|"
    p2= "00000*****   "
    p3= "|"
    ball = "*"
    print p2[:(13-(2*v))]
    asr = p1 + p2[:(13-(2*v))] + (v * " ") + (v * ball) + p3
    if v>5:
        ball = "0" * (v-5) 
        asr = p1 + p2[:13-(2*v)] + (v * " ") + (v * ball) + "*****"+ p3
    return asr


print "======================================"
print "result  " + line_pos(7)
print "correct >>>|00000**   ***|"
print "======================================"

def print_abacus(v):
    return line_pos(v)
